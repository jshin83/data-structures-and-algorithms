/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package animal_shelter;

import org.junit.Test;
import static org.junit.Assert.*;

public class AnimalShelterTest {
    private AnimalShelter classUnderTest;

    @Test
    public void init() {
        classUnderTest = new AnimalShelter();
        assertEquals("list should be empty", 0, classUnderTest.list.size());
    }

    @Test (expected = NullPointerException.class)
    public void emptyErrorMessage() {
        classUnderTest.dequeue("Cat");
    }

    @Test
    public void addAndDeleteOne() {
        init();
        classUnderTest.enqueue(new Dog("Barry"));
        assertEquals("instance list should be size of 1", 1, classUnderTest.list.size());

        Animal barry = classUnderTest.dequeue("Dog");
        assertEquals("Removed element name should be Barry", "Barry", barry.name);
    }

    @Test
    public void addManyDogsAndDeleteCat() {
        init();
        classUnderTest.enqueue(new Dog("Barry"));
        classUnderTest.enqueue(new Dog("Snowball"));
        classUnderTest.enqueue(new Dog("Fluffy"));
        classUnderTest.enqueue(new Cat("Foo"));

        Animal cat = classUnderTest.dequeue("Cat");
        assertEquals("Cat name should be foo", "Foo", cat.name);

        assertNull("No more cats, should return null for dequeue cat", classUnderTest.dequeue("Cat"));
    }

    @Test
    public void deleteFirstDog() {
        init();
        classUnderTest.enqueue(new Dog("Barry"));
        classUnderTest.enqueue(new Dog("Snowball"));
        classUnderTest.enqueue(new Dog("Fluffy"));

        Animal dog = classUnderTest.dequeue("Dog");
        assertEquals("Dog at shelter for longest time should return Barry", "Barry", dog.name);
    }

    @Test
    public void wrongPref() {
        init();
        classUnderTest.enqueue(new Cat("Fluff"));

        assertNull("Wrong pref should return null", classUnderTest.dequeue("Hi"));
    }
}
