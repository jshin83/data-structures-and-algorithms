/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package Data.Structures;

import java.util.ArrayList;
import java.util.List;

public class LinkedList {
    Node head;
    private static int size;

    private static class Node {
        private int data;
        private Node next;

        private Node(int data, Node next)
        {
            this.data = data;
            this.next = next;
        }
    }

    /**
     * Takes any value as an argument
     * and adds a new node with that value
     * to the head of the list with an O(1) Time performance
     * @param data int value to insert in new node
     */
     void insert(int data) {
        Node newNode;

        if(head == null) {
            newNode = new Node(data, null);
            head = newNode;
        } else {
            newNode = new Node(data, head);
            head = newNode;
        }
        size++;
    }

    /**
     * Takes any value as an argument
     * and returns a boolean result depending
     * on whether that value exists
     * as a Nodeâ€™s value somewhere within the list.
     * @param searchValue int to search for
     * @return boolean true if value is found, else false
     */
     boolean includes(int searchValue) {
        Node current = head;
        while(current != null) {
            if(current.data == searchValue) {
                return true;
            }
            current = current.next;
        }

        return false;
    }

    /**
     * Takes in no arguments
     * and returns a collection
     * of the current Node values in the Linked List.
     * @return
     */
     List<Integer> print() {
        List<Integer> nodeList = new ArrayList<>();

        Node current = head;

        while (head != null) {
            nodeList.add(current.data);
        }

        return nodeList;
    }

     int getHeadData() {
        return this.head.data;
    }

     int getSize() {
        return size;
    }

}
