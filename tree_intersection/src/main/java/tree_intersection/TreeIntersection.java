/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package tree_intersection;

import java.util.HashSet;
import java.util.Set;

public class TreeIntersection {
    private static Set<Integer> duplicates;
    private static Set<Integer> seen;

    /**
     * This method accepts two binary trees
     * and returns a Set of elements that both
     * trees contain.
     * Throws an error if any input tree is null / empty.
     * @param tree1 Node, tree of int
     * @param tree2 Node, tree of int
     * @return Set, Integers
     */
    public static Set findDuplicates(Node tree1, Node tree2) {
        seen = new HashSet<>();
        duplicates = new HashSet<>();

        if(tree1 == null || tree2 == null) {
            throw new IllegalArgumentException("Input cannot be empty");
        }
        traversal(tree1, "add");
        traversal(tree2, "duplicate");
        return duplicates;
    }

    // recursively traverses input tree
    // and method decides whether the elements are added
    // to a seen Set or evaluated against it and
    // added to duplicate Set
    private static void traversal(Node node, String method) {
        if (node == null) {
            return;
        } else {
            if(method.equals("add")) {
                seen.add(node.data);
                traversal(node.left, "add");
                traversal(node.right, "add");
            } else {
                // if first traversal set contains data, add to result set
                if(seen.contains(node.data)) {
                    System.out.println(node.data);
                    duplicates.add(node.data);
                }
                traversal(node.left, "duplicate");
                traversal(node.right, "duplicate");
            }
        }
    }

    static class Node {
        int data;
        Node left;
        Node right;

        /**
         * Constructor
         * @param data int
         */
        Node(int data) {
            this.data = data;
        }

        /**
         * Constructor
         * @param data int
         * @param left Node
         * @param right Node
         */
        Node(int data, Node left, Node right) {
            this.data = data;
            this.left = left;
            this.right = right;
        }
    }
}
