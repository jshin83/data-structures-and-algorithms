/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package arr_binary_search;

import org.junit.Before;
import org.junit.Test;

import java.util.Random;

import static org.junit.Assert.*;

public class LibraryTest {
    Library classUnderTest;

    @Before public void init() {
        classUnderTest = new Library();
    }

    @Test public void emptyArr() {
        int[] emptyarr = new int[] {};
        assertEquals("someLibraryMethod should return -1", -1,
                classUnderTest.binarySearch(emptyarr, 0));
    }

    @Test public void oneElArrNone() {
        int[] oneElArr = new int[] { 1 };
        assertEquals("someLibraryMethod should return -1", -1,
                classUnderTest.binarySearch(oneElArr, 0));
    }

    @Test public void oneElArrTrue() {
        int[] oneElArr = new int[] { 0 };
        assertEquals("someLibraryMethod should return -1", 0,
                classUnderTest.binarySearch(oneElArr, 0));
    }

    @Test public void returnIndex() {
        int[] oneElArr = new int[] { 4, 8, 15, 16, 23, 42 };
        assertEquals("someLibraryMethod should return -1", 2,
                classUnderTest.binarySearch(oneElArr, 15));
    }

    @Test public void returnNotFound() {
        int[] oneElArr = new int[] { 11, 22, 33, 44, 55, 66, 77 };
        assertEquals("someLibraryMethod should return -1", -1,
                classUnderTest.binarySearch(oneElArr, 15));
    }

    @Test public void hundredFound() {
        int[] hundred = returnArray(100);
        assertEquals("should find 2 at index 0", 2, classUnderTest.binarySearch(hundred, 2));
    }

    @Test public void hundredNotFound() {
        int[] hundred = returnArray(100);
        assertEquals("should not find 102 in hundred element array", -1,
                classUnderTest.binarySearch(hundred, 102));
    }

    @Test public void thousandFound() {
        int[] thousand = returnArray(1000);
        assertEquals("should find 99 at index 99", 99,
                classUnderTest.binarySearch(thousand, 99));
    }

    @Test public void thousandNotFound() {
        int[] thousand = returnArray(1000);
        assertEquals("should find 9999 at index 99", -1,
                classUnderTest.binarySearch(thousand, 9999));
    }

    @Test public void hundredThousandFound() {
        int[] thousand = returnArray(100000);
        assertEquals("should find 9999 at index 9999", 9999,
                classUnderTest.binarySearch(thousand, 9999));
    }

    @Test public void hundredThousandNotFound() {
        int[] thousand = returnArray(100000);
        assertEquals("should not find 999999 in array with 100,000 elements", -1,
                classUnderTest.binarySearch(thousand, 999999));
    }

    // helper - create array with desired number of elements
    private int[] returnArray(int length) {
        int[] arr = new int[length];
        for(int i = 0; i < length; i++) {
            arr[i] = i;
        }
        return arr;
    }
}
