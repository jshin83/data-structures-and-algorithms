/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package multibracketvalidation;

import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;

public class MultiBracketValidation {

    private static final Set<Character> FRONT_BRACKETS = new HashSet<>(Arrays.asList('{', '(', '['));
    private static final Set<Character> BACK_BRACKETS = new HashSet<>(Arrays.asList('}', ')', ']'));

    /**
     * This method checks a String to see if opening
     * and closing brackets are paired correctly.
     * @param bracketString String, string to check for bracket validation
     * @return boolean true if brackets exist and close correctly, else false
     */
     static Boolean multiBracketValidation (String bracketString) {
        StringBuilder idealBackBrackets = new StringBuilder();
        StringBuilder actualBackBrackets = new StringBuilder();

        if (bracketString == null || bracketString.isEmpty()) {
            throw new IllegalArgumentException("You passed in an empty string");
        }
        if(bracketString.length() == 1) {
            return false;
        }

        for(int i = 0; i < bracketString.length(); i++) {
            if(FRONT_BRACKETS.contains(bracketString.charAt(i))) {
                //append to the beginning of String because order will be reversed
                idealBackBrackets.insert(0, returnBackBracket(bracketString.charAt(i)));
            } else if (BACK_BRACKETS.contains(bracketString.charAt(i))) {
                actualBackBrackets.append(bracketString.charAt(i));
                //check both ideal and actual back brackets, return false if not matching
                String idealCorrectLen = idealBackBrackets.substring(0, actualBackBrackets.length());
                if(!actualBackBrackets.toString().equals(idealCorrectLen)) {
                    return false;
                }
            }
        }
        //if there are no brackets in whole string
        if(idealBackBrackets.toString().isEmpty()) {
            System.out.println("The string you passed in did not have any brackets");
        }
        //reach end of String, do final check
        return actualBackBrackets.toString().equals(idealBackBrackets.toString());
    }

    private static String returnBackBracket(char character) {
        char charAsString;
        if(character == '{') {
            charAsString = '}';
        } else if(character == '[') {
            charAsString = ']';
        } else {
            charAsString = ')';
        }
        return Character.toString(charAsString);
    }
}
