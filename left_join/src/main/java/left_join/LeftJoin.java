/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package left_join;

import java.util.*;

public class LeftJoin {

    /**
     * Returns left join
     * and if keys do not exist in second tree
     * the antonym value is null.
     * @param synonyms Map<String, String>, contains words and synonyms
     * @param antonyms Map<String, String>, contains words and antonyms
     * @return Map<String, String[]>, key word, String[] with synonym in index 0, antonym in index 1
     */
    public static Map<String, String[]> leftJoin(Map<String, String> synonyms, Map<String, String> antonyms) {
        Map<String, String[]> leftJoin = new HashMap<>();
        if(synonyms == null || antonyms == null) {
            throw new IllegalArgumentException("Input maps cannot be null.");
        }

        // add all left tree to set
        synonyms.forEach( (key, value) -> {
            leftJoin.put(key, new String[]{value, null});
        });

        // traverse right tree and see if key exists in result map
        // and update value
        antonyms.forEach( (key, value) -> {
            if(leftJoin.containsKey(key)) {
                String[] values = leftJoin.get(key);
                values[1] = value;
                leftJoin.put(key, values);
            }
        });

        return leftJoin;
    }
}
