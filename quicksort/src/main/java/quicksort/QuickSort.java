/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package quicksort;

import java.util.Arrays;

public class QuickSort {


    public static void main(String[] args) {
        int[] arr = new int[]{4, -11, 3, 77, -5, 1000, 3, 17, 44, -55, 2, 12};
        System.out.println(Arrays.toString(quickSort(arr, 0, arr.length - 1)));
    }

    /**
     * Quick sort recursive method
     *
     * @param arr int[], array to sort
     * @param left int, left partition aka index
     * @param right int, right partition aka index
     * @return
     */
    public static int[] quickSort(int[] arr, int left, int right) {
        if(arr == null) {
            throw new NullPointerException("Input array is empty");
        }
        if(arr.length == 1) {
            return arr;
        }
        if (left < right) {
            // Partition the array by setting the position of the pivot value
            int position = partition(arr, left, right);
            // Sort the left
            quickSort(arr, left, position - 1);
            // Sort the right
            quickSort(arr, position + 1, right);

        }
        return arr;
    }


    private static int partition(int[] arr, int left, int right) {
        int pivot = arr[right];
        int low = left - 1;
        for(int i = left; i < right; i++) {
            if(arr[i] <= pivot) {
                low++;
                swap(arr, i, low);
            }
        }
        swap(arr, right, low + 1);

        return low + 1;
    }

    private static void swap(int[] arr, int i, int low) {
        int temp;
        temp = arr[i];
        arr[i] = arr[low];
        arr[low] = temp;
    }
}
