/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package graph;

import org.junit.Test;
import static org.junit.Assert.*;
import graph.Graph.*;

import java.util.HashSet;
import java.util.List;

public class GraphTest {
    private Graph<Integer> testGraph;

    @Test
    public void init() {
        testGraph = new Graph<>();

    }

    @Test
    public void emptyGraph() {
        assertNull("Declared but not instantiated graph should be null", testGraph);

        init();

        assertEquals("instantiated graph should have size of 0", 0, testGraph.size());
    }

    @Test
    public void addNodeNoNeighbors() {
        init();

        Node three = testGraph.addNode(3);
        testGraph.addNode(3);
        testGraph.getNodes().forEach( vertex -> {
            System.out.println(vertex.data);
            System.out.println(testGraph.getNeighbors(vertex));
        });

        assertEquals("size should be 2", 2, testGraph.size());

        assertEquals("Get neighbors should return []", new HashSet(), testGraph.getNeighbors(three));
    }

    @Test
    public void addNeighborsAndEdge() {
        init();

        Node node1 = testGraph.addNode(3);
        Node node2 = testGraph.addNode(3);

        testGraph.addEdge(node1, node2, 90);
        System.out.println(node1.edges);

        assertTrue(
                "Node1 should have node2 as the only neighbor",
                testGraph.getNeighbors(node1).contains(node2)
                );

        assertEquals(
                "Node1 neighbors list should have size of 1",
                1,
                testGraph.getNeighbors(node1).size()
        );

        assertTrue(
                "Node2 should have node1 as a neighbor",
                testGraph.getNeighbors(node2).contains(node1)
        );

        assertEquals(
                "Node2 neighbors list should have size of 1",
                1,
                testGraph.getNeighbors(node2).size()
        );

        assertEquals(
                "Node 1 edge should contain one edge with weight of 90",
                "[Edge: weight = 90]",
                node1.edges.toString()
        );

        assertEquals(
                "Node 2 edge should contain one edge with weight of 90",
                "[Edge: weight = 90]",
                node2.edges.toString()
        );
    }

    @Test
    public void bft() {
        init();

        Node node1 = testGraph.addNode(3);
        Node node2 = testGraph.addNode(13);
        Node node3 = testGraph.addNode(7);
        Node node4 = testGraph.addNode(5);
        Node node5 = testGraph.addNode(15);


        testGraph.addEdge(node1, node2, 90);
        testGraph.addEdge(node4, node3, 11);
        testGraph.addEdge(node2, node3, 30);
        testGraph.addEdge(node4, node5, 111);
        testGraph.addEdge(node3, node5, 99);
        testGraph.addEdge(node1, node4, 16);

        List<Node> bfs = testGraph.bft(node2);

        assertTrue(
                "Node2 should have node1 as a neighbor",
                testGraph.getNeighbors(node2).contains(node1)
        );

        assertTrue(
                "Node2 should have node1 as a neighbor",
                testGraph.getNeighbors(node2).contains(node3)
        );

        assertEquals(
                "Size of result should be same as number of nodes",
                5,
                bfs.size()
        );

        String resultShouldBe = "[13, 3, 7, 5, 15]";

        assertEquals(
                "Node2 traversal should match string.",
                resultShouldBe,
                bfs.toString().trim()
        );
    }

    @Test (expected =  IllegalArgumentException.class)
    public void nullNodeBft() {
        init();
        Node node1 = null;
        testGraph.bft(node1);
    }


    /******************** city graph test ***********************************/

    private Graph<String> testGraph2;

    @Test
    public void init2() {
        testGraph2 = new Graph<>();

    }

    @Test
    public void emptyGraph2() {
        assertNull("Declared but not instantiated graph should be null", testGraph2);

        init2();

        assertEquals("instantiated graph should have size of 0", 0, testGraph2.size());
    }

    @Test
    public void addNodeNoNeighbors2() {
        init2();

        Node metroville = testGraph2.addNode("Metroville");
        testGraph2.addNode("Pandora");
        testGraph2.getNodes().forEach( vertex -> {
            System.out.println(vertex.data);
            System.out.println(testGraph2.getNeighbors(vertex));
        });

        assertEquals("size should be 2", 2, testGraph2.size());

        assertEquals("Get neighbors should return []", new HashSet(), testGraph2.getNeighbors(metroville));
    }


    @Test
    public void getEdgeStaticMethod() {
        init2();

        Node metroville = testGraph2.addNode("Metroville");
        Node pandora = testGraph2.addNode("Pandora");
        Node arendelle = testGraph2.addNode("Arendelle");
        Node monstropolis = testGraph2.addNode("Monstropolis");
        Node naboo = testGraph2.addNode("Naboo");
        Node narnia = testGraph2.addNode("Narnia");

        testGraph2.addEdge(metroville, pandora, 82);
        testGraph2.addEdge(pandora, arendelle, 150);
        testGraph2.addEdge(arendelle, monstropolis, 42);
        testGraph2.addEdge(metroville, arendelle, 99);
        testGraph2.addEdge(metroville, narnia, 37);
        testGraph2.addEdge(narnia, naboo, 250);
        testGraph2.addEdge(metroville, monstropolis, 105);
        testGraph2.addEdge(metroville, naboo, 26);
        testGraph2.addEdge(monstropolis, naboo, 73);

        System.out.println(metroville.edges);
        System.out.println(pandora.edges);


        assertTrue(
                "metroville should have node2 as the only neighbor",
                testGraph2.getNeighbors(metroville).contains(pandora)
        );

        assertEquals(
                "metroville neighbors list should have size of 5",
                5,
                testGraph2.getNeighbors(metroville).size()
        );

        assertTrue(
                "pandora should have metroville as a neighbor",
                testGraph2.getNeighbors(pandora).contains(metroville)
        );

        assertEquals(
                "pandora neighbors list should have size of 2",
                2,
                testGraph2.getNeighbors(pandora).size()
        );

        assertEquals(
                "metroville should contain five edges",
                5,
                metroville.edges.size()
        );

        assertEquals(
                "pandora edge should contain two edges with weights of 150 and 82",
                2,
                pandora.edges.size()
        );


        // HAPPY PATH
        assertEquals(
                "[Metroville, Pandora] should equal True, $82",
                "True, $82",
                Graph.get_edge(new Node[]{metroville, pandora}, testGraph2)
        );

        assertEquals(
                "[Arendelle, Monstropolis, Naboo] should equal True, $115",
                "True, $115",
                Graph.get_edge(new Node[]{arendelle, monstropolis, naboo}, testGraph2)
        );

        // SAD PATH
        assertEquals(
                "[Naboo, Pandora] should equal False, $0",
                "False, $0",
                Graph.get_edge(new Node[]{naboo, pandora}, testGraph2)
        );

        assertEquals(
                "[Narnia, Arendelle, Naboo] should equal False, $0",
                "False, $0",
                Graph.get_edge(new Node[]{narnia, arendelle, naboo}, testGraph2)
        );
    }

}
